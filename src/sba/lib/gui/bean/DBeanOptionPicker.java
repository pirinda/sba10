/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DBeanOptionPicker.java
 *
 * Created on 30/06/2011, 01:47:56 AM
 */

package sba.lib.gui.bean;

import java.awt.BorderLayout;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.Vector;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JPanel;
import sba.lib.DLibConsts;
import sba.lib.DLibUtils;
import sba.lib.db.DDbConsts;
import sba.lib.grid.DGridConsts;
import sba.lib.grid.DGridPaneForm;
import sba.lib.grid.DGridRow;
import sba.lib.grid.DGridRowOptionPicker;
import sba.lib.grid.DGridUtils;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiOptionPicker;
import sba.lib.gui.DGuiOptionPickerSettings;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;

/**
 *
 * @author Sergio Flores
 */
public class DBeanOptionPicker extends JDialog implements DGuiOptionPicker {

    public static JFrame OwnerFrame;

    protected DGuiClient miClient;
    protected int mnPickerType;
    protected int mnPickerSubtype;
    protected int mnPickerResult;
    protected boolean mbFirstActivation;
    protected DGuiOptionPickerSettings moSettings;
    protected DGridPaneForm moGridPicker;

    /** Creates new form DBeanOptionPicker */
    public DBeanOptionPicker() {
        super(OwnerFrame, true);
        initComponents();
        initComponentsBean();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpGrid = new javax.swing.JPanel();
        jpCommand = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("DBeanOptionPicker");
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jpGrid.setBorder(javax.swing.BorderFactory.createTitledBorder("Seleccionar una opci√≥n:"));
        jpGrid.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jpGrid, java.awt.BorderLayout.CENTER);

        jpCommand.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setMaximumSize(new java.awt.Dimension(75, 23));
        jbOk.setMinimumSize(new java.awt.Dimension(75, 23));
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jbOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbOkActionPerformed(evt);
            }
        });
        jpCommand.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelActionPerformed(evt);
            }
        });
        jpCommand.add(jbCancel);

        getContentPane().add(jpCommand, java.awt.BorderLayout.PAGE_END);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-576)/2, (screenSize.height-388)/2, 576, 388);
    }// </editor-fold>//GEN-END:initComponents

    private void jbOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbOkActionPerformed
        actionOk();
    }//GEN-LAST:event_jbOkActionPerformed

    private void jbCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelActionPerformed
        actionCancel();
    }//GEN-LAST:event_jbCancelActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        windowClosed();
    }//GEN-LAST:event_formWindowClosed

    private void initComponentsBean() {
        DGuiUtils.setWindowBounds(this, 560, 350);

        moGridPicker = null;
        DGuiUtils.createActionMap(rootPane, this, "actionCancel", "cancel", KeyEvent.VK_ESCAPE);
    }

    private void windowActivated() {
        if (mbFirstActivation) {
            mbFirstActivation = false;
            if (moGridPicker.getTable().getRowCount() > 0) {
                moGridPicker.getTable().requestFocus();
            }
            else {
                jbCancel.requestFocus();
            }
        }
    }

    private void windowClosed() {
        moGridPicker.paneViewClosed();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton jbCancel;
    protected javax.swing.JButton jbOk;
    private javax.swing.JPanel jpCommand;
    private javax.swing.JPanel jpGrid;
    // End of variables declaration//GEN-END:variables

    /*
     * Protected methods
     */

    protected void resetBaseForm() {
        mnPickerResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;
    }

    protected void createGridPicker() {
        moGridPicker = new DGridPaneForm(miClient, mnPickerType, mnPickerSubtype, true, getTitle()) {

            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                moModel.getGridColumns().addAll(moSettings.getGridColumns());
            }
        };

        moGridPicker.setForm(null);
        moGridPicker.setOptionPickerOwner(this);
        jpGrid.removeAll();
        jpGrid.add(moGridPicker, BorderLayout.CENTER);
    }

    protected void populateGridPicker() {
        int col = 0;
        int cols = moSettings.getGridColumns().size();
        int[] key = null;
        Class colClass = null;
        ResultSet resultSet = null;
        DGridRowOptionPicker row = null;
        Vector<DGridRow> rows = new Vector<DGridRow>();

        try {
            resultSet = miClient.getSession().getStatement().executeQuery(moSettings.getSql());
            while (resultSet.next()) {
                if (moSettings.getPrimaryKeyLength() > 0) {
                    key = new int[moSettings.getPrimaryKeyLength()];
                    for (col = 0; col < moSettings.getPrimaryKeyLength(); col++) {
                        key[col] = resultSet.getInt(DDbConsts.FIELD_ID + (col + 1));
                    }
                }

                row = new DGridRowOptionPicker(key);
                for (col = 0; col < cols; col++) {
                    colClass = DGridUtils.getDataTypeClass(moSettings.getGridColumns().get(col).getColumnType());

                    if (colClass == Long.class) {
                        row.getValues().add(resultSet.getLong(DDbConsts.FIELD_PICK + (col + 1)));
                    }
                    else if (colClass == Integer.class) {
                        row.getValues().add(resultSet.getInt(DDbConsts.FIELD_PICK + (col + 1)));
                    }
                    else if (colClass == Double.class) {
                        row.getValues().add(resultSet.getDouble(DDbConsts.FIELD_PICK + (col + 1)));
                    }
                    else if (colClass == Float.class) {
                        row.getValues().add(resultSet.getFloat(DDbConsts.FIELD_PICK + (col + 1)));
                    }
                    else if (colClass == Boolean.class) {
                        row.getValues().add(resultSet.getBoolean(DDbConsts.FIELD_PICK + (col + 1)));
                    }
                    else if (colClass == String.class) {
                        row.getValues().add(resultSet.getString(DDbConsts.FIELD_PICK + (col + 1)));
                    }
                    else if (colClass == Date.class) {
                        switch (moSettings.getGridColumns().get(col).getColumnType()) {
                            case DGridConsts.COL_TYPE_DATE:
                                row.getValues().add(resultSet.getDate(DDbConsts.FIELD_PICK + (col + 1)));
                                break;
                            case DGridConsts.COL_TYPE_DATE_DATETIME:
                                row.getValues().add(resultSet.getTimestamp(DDbConsts.FIELD_PICK + (col + 1)));
                                break;
                            case DGridConsts.COL_TYPE_DATE_TIME:
                                row.getValues().add(resultSet.getTime(DDbConsts.FIELD_PICK + (col + 1)));
                                break;
                            default:
                                throw new Exception(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
                        }
                    }
                    else {
                        throw new Exception(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
                    }
                }

                if (moSettings.isMainOptionApplying()) {
                    switch (moSettings.getMainOptionDataType()) {
                        case DLibConsts.DATA_TYPE_INT:
                            row.setMainOption(resultSet.getLong(DDbConsts.FIELD_VALUE));
                            break;
                        case DLibConsts.DATA_TYPE_DEC:
                            row.setMainOption(resultSet.getDouble(DDbConsts.FIELD_VALUE));
                            break;
                        case DLibConsts.DATA_TYPE_BOOL:
                            row.setMainOption(resultSet.getBoolean(DDbConsts.FIELD_VALUE));
                            break;
                        case DLibConsts.DATA_TYPE_TEXT:
                            row.setMainOption(resultSet.getString(DDbConsts.FIELD_VALUE));
                            break;
                        case DLibConsts.DATA_TYPE_DATE:
                            row.setMainOption(resultSet.getDate(DDbConsts.FIELD_VALUE));
                            break;
                        default:
                            throw new Exception(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
                    }
                }

                rows.add(row);
            }

            moGridPicker.populateGrid(rows);
        }
        catch (SQLException e) {
            DLibUtils.showException(this, e);
        }
        catch (Exception e) {
            DLibUtils.showException(this, e);
        }
    }

    /*
     * Public methods
     */

    public JPanel getBeanPanel() {
        return jpGrid;
    }

    /*
     * Overriden methods
     */

    @Override
    public void setPickerSettings(final DGuiClient client, final int pickerType, final int pickerSubtype, final DGuiOptionPickerSettings settings) {
        miClient = client;
        mnPickerType = pickerType;
        mnPickerSubtype = pickerSubtype;
        moSettings = settings;
        createGridPicker();
        setTitle(moSettings.getTitle());
    }

    @Override
    public void resetPicker() {
        resetBaseForm();
        populateGridPicker();
    }

    @Override
    public void setPickerVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public void setOption(Object option) {
        int row = -1;

        if (option != null) {
            if (moSettings.isMainOptionApplying()) {
                for (row = 0; row < moGridPicker.getModel().getRowCount(); row++) {
                    if (option == ((DGridRowOptionPicker) moGridPicker.getGridRow(row)).getMainOption()) {
                        break;
                    }
                }
            }
            else {
                for (row = 0; row < moGridPicker.getModel().getRowCount(); row++) {
                    if (DLibUtils.compareKeys(option, moGridPicker.getGridRow(row).getRowPrimaryKey())) {
                        break;
                    }
                }
            }

            if (row != -1) {
                moGridPicker.setSelectedGridRow(row);
            }
        }
    }

    @Override
    public Object getOption() {
        Object option = null;
        DGridRowOptionPicker row = (DGridRowOptionPicker) moGridPicker.getSelectedGridRow();

        if (row != null) {
            option = moSettings.isMainOptionApplying() ? row.getMainOption() : row.getRowPrimaryKey();
        }

        return option;
    }

    @Override
    public DGuiValidation validatePicker() {
        DGuiValidation validation = new DGuiValidation();

        if (moGridPicker.getSelectedGridRow() == null) {
            validation.setMessage(DGridConsts.MSG_SELECT_ROW);
            validation.setComponent(moGridPicker.getTable());
        }

        return validation;
    }

    @Override
    public int getPickerType() {
        return mnPickerType;
    }

    @Override
    public int getPickerSubtype() {
        return mnPickerSubtype;
    }

    @Override
    public int getPickerResult() {
        return mnPickerResult;
    }

    @Override
    public void actionOk() {
        if (jbOk.isEnabled()) {
            if (DGuiUtils.computeValidation(miClient, validatePicker())) {
                mnPickerResult = DGuiConsts.FORM_RESULT_OK;
                dispose();
            }
        }
    }

    @Override
    public void actionCancel() {
        if (jbCancel.isEnabled()) {
            mnPickerResult = DGuiConsts.FORM_RESULT_CANCEL;
            dispose();
        }
    }
}
