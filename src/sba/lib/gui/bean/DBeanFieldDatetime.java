/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SBeanFieldDate.java
 *
 * Created on 17/06/2011, 04:14:33 PM
 */

package sba.lib.gui.bean;

import java.awt.event.KeyEvent;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import sba.lib.DLibConsts;
import sba.lib.DLibTimeConsts;
import sba.lib.DLibTimeUtils;
import sba.lib.DLibUtils;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiField;
import sba.lib.gui.DGuiFieldDate;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;

/**
 *
 * @author Sergio Flores
 */
public class DBeanFieldDatetime extends JPanel implements DGuiFieldDate {

    protected String msFieldName;
    protected int mnGuiType;
    protected SimpleDateFormat moSimpleDateFormat;
    protected Date mtDefaultValue;
    protected Date mtMinDate;
    protected Date mtMaxDate;
    protected boolean mbMandatory;
    protected DGuiField moNextField;
    protected JButton moNextButton;
    protected JButton moFormButton;
    protected int mnTab;
    protected DGuiClient miClient;

    /** Creates new form SBeanFieldDate */
    public DBeanFieldDatetime() {
        mtMinDate = DLibTimeUtils.createDate(DLibTimeConsts.YEAR_MIN, 1, 1);
        mtMaxDate = DLibTimeUtils.createDate(DLibTimeConsts.YEAR_MAX, 12, 31);
        mtDefaultValue = mtMinDate;
        resetGuiType();

        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbDatetime = new javax.swing.JButton();
        jsDatetime = new javax.swing.JSpinner();
        jsDatetime.setModel(new SpinnerDateModel(mtDefaultValue, mtMinDate, mtMaxDate, Calendar.SECOND));
        jsDatetime.setEditor(new JSpinner.DateEditor(jsDatetime, moSimpleDateFormat.toPattern()));

        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });
        setLayout(new java.awt.BorderLayout(5, 0));

        jbDatetime.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/lib/img/cal_cal.gif"))); // NOI18N
        jbDatetime.setToolTipText("Ahora");
        jbDatetime.setPreferredSize(new java.awt.Dimension(23, 23));
        jbDatetime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDatetimeActionPerformed(evt);
            }
        });
        add(jbDatetime, java.awt.BorderLayout.LINE_END);

        jsDatetime.setPreferredSize(new java.awt.Dimension(130, 20));
        add(jsDatetime, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jbDatetimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDatetimeActionPerformed
        jsDatetime.setValue(createNow());
        ((JSpinner.DefaultEditor) jsDatetime.getEditor()).getTextField().requestFocus();
    }//GEN-LAST:event_jbDatetimeActionPerformed

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        if (evt.getOppositeComponent() != jsDatetime) {
            processFocus();
        }
    }//GEN-LAST:event_formFocusGained

    private void initComponentsCustom() {
        msFieldName = "";
        /* Allready set in class constructor:
        mnGuiType = DLibConsts.UNDEFINED;
        moSimpleDateFormat = null;
        mtDefaultValue = null;
        mtMinDate = null;
        mtMaxDate = null;
        */
        mbMandatory = true;
        moNextField = null;
        moNextButton = null;
        moFormButton = null;
        mnTab = -1;
        miClient = null;

        /* Allready set in class constructor:
        resetGuiType();
        */
        resetField();

        ((JSpinner.DefaultEditor) jsDatetime.getEditor()).getTextField().addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyPressed(java.awt.event.KeyEvent evt) {
                keyPressedDatetime(evt);
            }
        });
    }

    private void resetGuiType() {
        mnGuiType = DGuiConsts.GUI_TYPE_DATE_DATETIME;
        moSimpleDateFormat = DLibUtils.DateFormatDatetime;
        //defineMaskFormatter(moSimpleDateFormat.toPattern());  no required, allready done in constructor
    }

    private void defineMaskFormatter(String pattern) {
        ((JSpinner.DateEditor) jsDatetime.getEditor()).getFormat().applyPattern(pattern);
    }

    private void keyPressedDatetime(KeyEvent event) {
        if (event.getKeyCode() == KeyEvent.VK_ENTER) {
            if (moNextButton != null && moNextButton.isEnabled()) {
                moNextButton.requestFocus();
            }
            else if (moNextField != null) {
                moNextField.processFocus();
            }
            else if (moFormButton != null && moFormButton.isEnabled()) {
                moFormButton.requestFocus();
            }
        }
    }

    private Date createNow() {
        int[] date = DLibTimeUtils.digestDate(miClient.getSession().getWorkingDate());
        GregorianCalendar gcNow = new GregorianCalendar();
        return new GregorianCalendar(date[0], date[1] - 1, date[2], gcNow.get(Calendar.HOUR_OF_DAY), gcNow.get(Calendar.MINUTE), gcNow.get(Calendar.SECOND)).getTime();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbDatetime;
    private javax.swing.JSpinner jsDatetime;
    // End of variables declaration//GEN-END:variables

    /*
     * Class public methods:
     */

    /*
     * Implemented and overrided methods:
     */

    @Override
    public void setFieldName(final String name) {
        msFieldName = name;
    }

    @Override
    public int getDataType() {
        return DLibConsts.DATA_TYPE_DATE;
    }

    @Override
    public int getGuiType() {
        return mnGuiType;
    }

    @Override
    public String getFieldName() {
        return msFieldName;
    }

    @Override
    public JSpinner getComponent() {
        return jsDatetime;
    }

    @Override
    public boolean isMandatory() {
        return mbMandatory;
    }

    @Override
    public void setValue(final Object value) {
        jsDatetime.setValue((Date) value);
    }

    @Override
    public void setDefaultValue(final Object value) {
        mtDefaultValue = (Date) value;
    }

    @Override
    public void setEnabled(final boolean enabled) {
        jsDatetime.setEnabled(enabled);
        jbDatetime.setEnabled(enabled);
    }

    @Override
    public void setEditable(final boolean editable) {
        jsDatetime.setEnabled(editable);
        jbDatetime.setEnabled(editable);
    }

    @Override
    public void setNextField(final DGuiField field) {
        moNextField = field;
    }

    @Override
    public void setNextButton(final JButton button) {
        moNextButton = button;
    }

    @Override
    public void setFormButton(final JButton button) {
        moFormButton = button;
    }

    @Override
    public void setTab(int tab) {
        mnTab = tab;
    }

    @Override
    public int getTab() {
        return mnTab;
    }

    @Override
    public boolean isEnabled() {
        return jsDatetime.isEnabled();
    }

    @Override
    public boolean isEditable() {
        return jsDatetime.isEnabled();
    }

    @Override
    public boolean isFocusable() {
        return jsDatetime.isEnabled();
    }

    @Override
    public DGuiField getNextField() {
        return moNextField;
    }

    @Override
    public JButton getNextButton() {
        return moNextButton;
    }

    @Override
    public JButton getFormButton() {
        return moFormButton;
    }

    @Override
    public void processFocus() {
        if (isFocusable()) {
            ((JSpinner.DefaultEditor) jsDatetime.getEditor()).getTextField().requestFocus();
        }
        else {
            keyPressedDatetime(new KeyEvent(jsDatetime, KeyEvent.KEY_PRESSED, 0, 0, KeyEvent.VK_ENTER, KeyEvent.CHAR_UNDEFINED));
        }
    }

    @Override
    public void resetField() {
        setValue(mtDefaultValue);
    }

    @Override
    public DGuiValidation validateField() {
        Date date = null;
        DGuiValidation validation = new DGuiValidation();

        date = getValue();

        if (mbMandatory && date == null) {
            validation.setMessage("Se debe especificar un valor " + DGuiUtils.getLabelDatetime(mnGuiType) + " para el campo '" + msFieldName + "'.");
        }
        else if (date != null && mtMinDate != null && date.before(mtMinDate)) {
            validation.setMessage("El valor " + DGuiUtils.getLabelDatetime(mnGuiType) + " del campo '" + msFieldName + "' no puede ser anterior a " + moSimpleDateFormat.format(mtMinDate) + ".");
        }
        else if (date != null && mtMaxDate != null && date.after(mtMaxDate)) {
            validation.setMessage("El valor " + DGuiUtils.getLabelDatetime(mnGuiType) + " del campo '" + msFieldName + "' no puede ser posterior a " + moSimpleDateFormat.format(mtMaxDate) + ".");
        }

        if (!validation.isValid()) {
            validation.setComponent(jsDatetime);
            validation.setTab(mnTab);
        }

        return validation;
    }

    /*
     * Implementation of DGuiFieldDate:
     */

    @Override
    public Date getValue() {
        return (Date) jsDatetime.getValue();
    }

    @Override
    public Date getDefaultValue() {
        return mtDefaultValue;
    }

    @Override
    public void setDateSettings(final DGuiClient client, final String name, final boolean isMandatory) {
        miClient = client;
        setFieldName(name);
        setMandatory(isMandatory);
    }

    @Override
    public void setMandatory(final boolean mandatory) {
        mbMandatory = mandatory;
    }

    @Override
    public void setGuiType(final int type) {
        mnGuiType = type;

        switch (type) {
            case DGuiConsts.GUI_TYPE_DATE:
                moSimpleDateFormat = DLibUtils.DateFormatDate;
                break;
            case DGuiConsts.GUI_TYPE_DATE_DATETIME:
                moSimpleDateFormat = DLibUtils.DateFormatDatetime;
                break;
            case DGuiConsts.GUI_TYPE_DATE_TIME:
                moSimpleDateFormat = DLibUtils.DateFormatTime;
                break;
            default:
                resetGuiType();
        }

        defineMaskFormatter(moSimpleDateFormat.toPattern());
    }

    @Override
    public void setMinDate(final Date min) {
        mtMinDate = min;
    }

    @Override
    public void setMaxDate(final Date max) {
        mtMaxDate = max;
    }

    @Override
    public Date getMinDate() {
        return mtMinDate;
    }

    @Override
    public Date getMaxDate() {
        return mtMaxDate;
    }
}
